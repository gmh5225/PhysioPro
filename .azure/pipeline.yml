trigger:
- 'main'

resources:
  repositories:
  - repository: data
    type: git
    name: Forecaster/Sample-Testdata

stages:

- stage: test

  jobs:

  - job: lint

    pool:
      vmImage: ubuntu-latest

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
      displayName: 'Use Python 3.8'

    - script: |
        pip install -e .[dev]
      displayName: 'Installation'

    - script: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --exclude=experimental,tests/configs --show-source --statistics --max-line-length=120 --ignore=F401,W503,E203,E501
      displayName: 'flake8'


  - job: test

    pool:
      vmImage: ubuntu-latest

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
      displayName: 'Use Python 3.8'

    - checkout: data
      path: data
      lfs: true

    - checkout: self
      path: code

    - script: |
        echo "##vso[task.setvariable variable=CodeDirectory]$(Agent.BuildDirectory)/code"
      displayName: 'Set default working directory'

    - script: |
        ls -al ../data
        ln -s ../data data_sample
      workingDirectory: '$(CodeDirectory)'
      displayName: 'Examine and link data'

    - script: |
        pip install -e .[dev]
      workingDirectory: '$(CodeDirectory)'
      displayName: 'Installation'

    - script: |
        pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=forecaster --cov-config=.coveragerc --cov-report=xml --cov-report=html -W ignore::DeprecationWarning
      workingDirectory: '$(CodeDirectory)'
      displayName: 'pytest'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '$(CodeDirectory)/**/test-*.xml'
        testRunTitle: 'Publish test results for Python 3.8'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(CodeDirectory)/**/coverage.xml'
        reportDirectory: '$(CodeDirectory)/**/htmlcov'


- stage: publish

  condition: and(succeeded(), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'))

  jobs:
    - job: docker
  
      displayName: "Create docker package for forecaster"
  
      pool:
        vmImage: 'ubuntu-latest'
  
      steps:
      - bash: |
          echo "##vso[task.setvariable variable=VERSION]$(cat forecaster/__init__.py | cut -d' ' -f 3 | cut -d'"' -f 2)"
  
      - task: UsePythonVersion@0
        displayName: 'Use Python version'
        inputs:
          versionSpec: '3.8'
  
      - script: pip install setuptools wheel
        displayName: 'Install dependencies'
  
      - script: python setup.py bumpver
        displayName: 'Bump dev version'
  
      - script: python setup.py sdist bdist_wheel
        displayName: 'Build Python package'
  
      - task: Docker@2
        displayName: Login of Dockerhub
        inputs:
          command: login
          containerRegistry: Dockerhub-fyc
  
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: buildAndPush
          repository: yuchen/forecaster
          dockerfile: docker/forecaster.Dockerfile
          containerRegistry: MSRShare
          buildContext: $(System.DefaultWorkingDirectory)
          tags: |
            sing
            $(VERSION)
  
      - script: docker tag japanv100cr.azurecr.io/yuchen/forecaster:$(VERSION) arthurnull/seqml-base:$(VERSION)
        displayName: 'Retag the image'

      - script: docker tag japanv100cr.azurecr.io/yuchen/forecaster:sing arthurnull/seqml-base:latest
        displayName: 'Retag the image'
  
      - task: Docker@2
        displayName: push to Dockerhub
        inputs:
          command: push
          repository: arthurnull/seqml-base
          containerRegistry: Dockerhub-fyc
          tags: |
            latest
            $(VERSION)

      - task: Docker@2
        displayName: Logout of Dockerhub
        inputs:
          command: logout
          containerRegistry: Dockerhub-fyc
